import { createClient } from '@supabase/supabase-js';\n\n// Configuración de Supabase y claves\nconst SUPABASE_URL = 'https://numjphltuyfbpyrnevlu.supabase.co';\nconst ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im51bWpwaGx0dXlmYnB5cm5ldmx1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyMjkzMDUsImV4cCI6MjA2MjgwNTMwNX0.Tzz4PO4bex6-UvaDrLs4FnN8y3x72liy5BoluRnOvCI';\nconst SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im51bWpwaGx0dXlmYnB5cm5ldmx1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NzIyOTMwNSwiZXhwIjoyMDYyODA1MzA1fQ.HGzL8CliXQ-8LMdAf6QCDdb82qLGdjcQC3ekdaeRhdw';\n\n// Crear cliente estándar y admin\nconst supabase = createClient(SUPABASE_URL, ANON_KEY);\nconst supabaseAdmin = createClient(SUPABASE_URL, SERVICE_KEY, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false,\n    detectSessionInUrl: false\n  },\n  global: {\n    headers: {\n      Authorization: Bearer ,\n      apikey: SERVICE_KEY\n    }\n  }\n});\n\n// Función principal de diagnóstico\nasync function testSupabaseConfiguration() {\n  console.log('=== DIAGNÓSTICO DE CONFIGURACIÓN DE SUPABASE ===');\n  console.log('URL:', SUPABASE_URL);\n  \n  // Prueba 1: Verificar cliente regular\n  console.log('\\n1. Probando cliente regular...');\n  try {\n    const { data, error } = await supabase.from('user_roles').select('count').limit(1);\n    \n    if (error) {\n      console.error('   Error al acceder a la tabla user_roles:', error.message);\n    } else {\n      console.log('   Cliente regular funcionando correctamente');\n    }\n  } catch (err) {\n    console.error('   Error inesperado con cliente regular:', err.message);\n  }\n  \n  // Prueba 2: Verificar autenticación\n  console.log('\\n2. Probando servicio de autenticación...');\n  try {\n    const { data, error } = await supabase.auth.getSession();\n    \n    if (error) {\n      console.error('   Error de autenticación:', error.message);\n    } else {\n      console.log('   Servicio de autenticación funcionando correctamente');\n    }\n  } catch (err) {\n    console.error('   Error inesperado con autenticación:', err.message);\n  }\n  \n  // Prueba 3: Verificar cliente admin\n  console.log('\\n3. Probando cliente admin (service_role)...');\n  try {\n    const { data, error } = await supabaseAdmin.auth.admin.listUsers({ perPage: 1 });\n    \n    if (error) {\n      console.error('   Error al usar cliente admin:', error.message);\n      console.log('\\nProblema con la clave service_role. Verificar:');\n      console.log('1. La clave service_role es correcta');\n      console.log('2. La clave tiene el formato JWT correcto');\n      console.log('3. El proyecto de Supabase tiene habilitadas las APIs de admin');\n    } else {\n      console.log('   Cliente admin funcionando correctamente');\n      console.log(  Encontrados  usuarios);\n    }\n  } catch (err) {\n    console.error('   Error inesperado con cliente admin:', err.message);\n  }\n  \n  // Prueba 4: Intentar crear un usuario (si el admin funciona)\n  console.log('\\n4. Probando creación de usuario con cliente admin...');\n  const testEmail = 	est-@example.com;\n  const testPassword = 'testPassword123';\n  \n  try {\n    const { data, error } = await supabaseAdmin.auth.admin.createUser({\n      email: testEmail,\n      password: testPassword,\n      email_confirm: true\n    });\n    \n    if (error) {\n      console.error('   Error al crear usuario de prueba:', error.message);\n    } else {\n      console.log('   Usuario de prueba creado correctamente');\n      console.log(  Email: );\n      \n      // Eliminar el usuario de prueba\n      try {\n        const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(data.user.id);\n        if (deleteError) {\n          console.error('   Error al eliminar usuario de prueba:', deleteError.message);\n        } else {\n          console.log('   Usuario de prueba eliminado correctamente');\n        }\n      } catch (deleteErr) {\n        console.error('   Error inesperado al eliminar usuario de prueba:', deleteErr.message);\n      }\n    }\n  } catch (err) {\n    console.error('   Error inesperado al crear usuario de prueba:', err.message);\n  }\n  \n  console.log('\\n=== FIN DE DIAGNÓSTICO ===');\n}\n\n// Ejecutar diagnóstico\ntestSupabaseConfiguration();\n